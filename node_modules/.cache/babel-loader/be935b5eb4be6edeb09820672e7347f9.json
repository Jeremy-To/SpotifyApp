{"ast":null,"code":"const CLIENT_ID = '6ecf7f42beba46b285d31a8fb7918655';\n// for production uri\nconst REDIRECT_URI = 'http://jammming-farulivan.surge.sh/';\n// for development uri\n// const REDIRECT_URI = 'http://localhost:3000/';\nlet accessToken;\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    }\n\n    //check for access token match\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n    if (accessTokenMatch && expiresInMatch) {\n      accessToken = accessTokenMatch[1];\n      const expiresIn = Number(expiresInMatch[1]);\n      // This clears the parameters, allowing us to grab a new access token when it expires\n      window.setTimeout(() => accessToken = '', expiresIn * 1000);\n      window.history.pushState('Access Token', null, '/');\n      return accessToken;\n    } else {\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${CLIENT_ID}&response_type=token&scope=playlist-modify-public&redirect_uri=${REDIRECT_URI}`;\n      window.location = accessUrl;\n    }\n  },\n  async search(term) {\n    const accessToken = Spotify.getAccessToken();\n    const response = await fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    });\n    const jsonResponse = await response.json();\n    if (!jsonResponse.tracks) {\n      return [];\n    }\n    return jsonResponse.tracks.items.map(track => ({\n      id: track.id,\n      name: track.name,\n      artist: track.artists[0].name,\n      album: track.album.name,\n      uri: track.uri\n    }));\n  },\n  savePlaylist(name, trackURIs) {\n    if (!name || !trackURIs.length) {\n      return;\n    }\n    const accessToken = Spotify.getAccessToken();\n    const headers = {\n      Authorization: `Bearer ${accessToken}`\n    };\n    let userID;\n    return fetch(`https://api.spotify.com/v1/me`, {\n      headers: headers\n    }).then(response => response.json()).then(jsonResponse => {\n      userID = jsonResponse.id;\n      return fetch(`https://api.spotify.com/v1/users/${userID}/playlists`, {\n        headers: headers,\n        method: 'POST',\n        body: JSON.stringify({\n          name: name\n        })\n      }).then(response => response.json()).then(jsonResponse => {\n        const playlistID = jsonResponse.id;\n        return fetch(`https://api.spotify.com/v1/users/${userID}/playlists/${playlistID}/tracks`, {\n          headers: headers,\n          method: 'POST',\n          body: JSON.stringify({\n            uris: trackURIs\n          })\n        });\n      });\n    });\n  }\n};\nexport default Spotify;","map":{"version":3,"names":["CLIENT_ID","REDIRECT_URI","accessToken","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","search","term","response","fetch","headers","Authorization","jsonResponse","json","tracks","items","map","track","id","name","artist","artists","album","uri","savePlaylist","trackURIs","length","userID","then","method","body","JSON","stringify","playlistID","uris"],"sources":["/Users/jeremyto/Documents/Programation/testSpotify/api-spotify/src/util/Spotify.js"],"sourcesContent":["const CLIENT_ID = '6ecf7f42beba46b285d31a8fb7918655';\n// for production uri\nconst REDIRECT_URI = 'http://jammming-farulivan.surge.sh/';\n// for development uri\n// const REDIRECT_URI = 'http://localhost:3000/';\nlet accessToken;\n\nconst Spotify = {\n    getAccessToken(){\n        if(accessToken) {\n            return accessToken\n        }\n\n        //check for access token match\n        const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/)\n        const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/)\n\n        if(accessTokenMatch && expiresInMatch) {\n            accessToken = accessTokenMatch[1]\n            const expiresIn = Number(expiresInMatch[1])\n            // This clears the parameters, allowing us to grab a new access token when it expires\n            window.setTimeout(() => accessToken = '', expiresIn * 1000)\n            window.history.pushState('Access Token', null, '/')\n            return accessToken\n        } else {\n            const accessUrl = `https://accounts.spotify.com/authorize?client_id=${CLIENT_ID}&response_type=token&scope=playlist-modify-public&redirect_uri=${REDIRECT_URI}`;\n            window.location = accessUrl\n        }\n    },\n    \n    async search(term) {\n        const accessToken = Spotify.getAccessToken();\n        const response = await fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n            headers: {\n                Authorization: `Bearer ${accessToken}`\n            }\n        });\n        const jsonResponse = await response.json();\n        if (!jsonResponse.tracks) {\n            return [];\n        }\n        return jsonResponse.tracks.items.map(track => ({\n            id: track.id,\n            name: track.name,\n            artist: track.artists[0].name,\n            album: track.album.name,\n            uri: track.uri\n        }));\n    },\n\n    savePlaylist(name, trackURIs) {\n        if(!name || !trackURIs.length) {\n            return\n        }\n\n        const accessToken = Spotify.getAccessToken()\n        const headers = { Authorization: `Bearer ${accessToken}` }\n        let userID\n\n        return fetch(`https://api.spotify.com/v1/me`, { headers: headers})\n            .then(response => response.json())\n            .then(jsonResponse => {\n                userID = jsonResponse.id\n                return fetch(`https://api.spotify.com/v1/users/${userID}/playlists`,{\n                    headers: headers,\n                    method: 'POST',\n                    body: JSON.stringify({ name: name })\n                })\n                .then(response => response.json())\n                .then(jsonResponse => {\n                    const playlistID = jsonResponse.id\n                    return fetch(`https://api.spotify.com/v1/users/${userID}/playlists/${playlistID}/tracks`, {\n                        headers: headers,\n                        method: 'POST',\n                        body: JSON.stringify({ uris: trackURIs })\n                    })\n                })\n            })\n    }\n}\n\nexport default Spotify"],"mappings":"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"},"metadata":{},"sourceType":"module"}